:orphan:

.. examples-index:

Examples
========

The examples in this gallery demonstrate  the functionality of the ``xugrid``
package. Every example can be downloaded as either a Python script or a Jupyter
notebook for interactive exploration.


.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Here are a number of quick examples of how to get started with xugrid. More detailed explanation can be found in the rest of the documentation.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_quick_overview_thumb.png
    :alt:

  :ref:`sphx_glr_examples_quick_overview.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Quick overview</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Grid partitioning, or domain decomposition, is an important step in setting up parallellized simulations. Xugrid provides utilities for partitioning a grid and its associated data, and for merging partitions back into a single whole.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_partitioning_thumb.png
    :alt:

  :ref:`sphx_glr_examples_partitioning.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Partitioning</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="The labels that are present in xarray&#x27;s data structures allow for easy creation of informative plots: think of dates on the x-axis, or geospatial coordinates. Xarray provides a convenient way of plotting your data provided it is structured. Xugrid extends these plotting methods to easily make spatial (x-y) plots of unstructured grids.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_plotting_thumb.png
    :alt:

  :ref:`sphx_glr_examples_plotting.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Plot unstructured mesh data</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="The overlap regridder works in two stages. First, it searches the source grid for all faces of the target grid, computes the intersections, and stores all overlaps between source and target faces. This occurs when the regridder is initialized. Second, the regridder applies the weights: it reduces the collection of overlapping faces to a single value for the target face.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_overlap_regridder_thumb.png
    :alt:

  :ref:`sphx_glr_examples_overlap_regridder.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">OverlapRegridder</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="A fundamental difference between structured and unstructured grids lies in the connectivity. This is true for cell to cell connectivity, but also for vertex (node) connectivity (which set of vertices make up an individual cell). In structured grids, connectivity is implicit and can be directly derived from row and column numbers; unstructured grids require explicit connectivity lists.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_connectivity_thumb.png
    :alt:

  :ref:`sphx_glr_examples_connectivity.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Connectivity</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Xarray has flexible tools for label based selection, in the form of .sel and .isel for index selection. This works well for structured data since the orthogonality of the x and y axes is reflected in the axes of the underlying arrays. This orthogonality does not exist for unstructured grids, as the data for all faces cannot be stored in a two-dimensional array and is stored in a one-dimensional array instead.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_selection_thumb.png
    :alt:

  :ref:`sphx_glr_examples_selection.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Select unstructured data</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="`Regridding`_ is the process of converting gridded data from one grid to another grid. Xugrid provides tools for 2D and 3D regridding of structured gridded data, represented as xarray objects, as well as (`layered`_) unstructured gridded data, represented as xugrid objects.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_regridder_overview_thumb.png
    :alt:

  :ref:`sphx_glr_examples_regridder_overview.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Regridding overview</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="A great deal of geospatial data is available not in gridded form, but in vector form: as points, lines, and polygons. In the Python data ecosystem, these geometries and their associated data are generally represented by a geopandas GeoDataFrame.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_vector_conversion_thumb.png
    :alt:

  :ref:`sphx_glr_examples_vector_conversion.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Vector geometry conversion</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this example, we demonstrate how to interpolate and grid data from a network of line elements (UGRID1D) to a 2D structured grid.">

.. only:: html

  .. image:: /examples/images/thumb/sphx_glr_network_gridder_thumb.png
    :alt:

  :ref:`sphx_glr_examples_network_gridder.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Network gridder example</div>
    </div>


.. thumbnail-parent-div-close

.. raw:: html

    </div>


.. toctree::
   :hidden:

   /examples/quick_overview
   /examples/partitioning
   /examples/plotting
   /examples/overlap_regridder
   /examples/connectivity
   /examples/selection
   /examples/regridder_overview
   /examples/vector_conversion
   /examples/network_gridder



.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
