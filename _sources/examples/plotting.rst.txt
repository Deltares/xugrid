
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plotting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plotting.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plotting.py:


Plot unstructured mesh data
===========================

The labels that are present in xarray's data structures allow for easy creation
of informative plots: think of dates on the x-axis, or geospatial coordinates.
Xarray provides a convenient way of plotting your data provided it is
structured. Xugrid extends these plotting methods to easily make spatial
(x-y) plots of unstructured grids.

Like Xarray's focus for plotting is the DataArray, Xugrid's focus is the
UgridDataArray; like Xarray, if your (extracted) data fits into a pandas
DataFrame, you're better of using pandas tools instead.

As every other method in Xugrid, any logic involving the unstructured topology
is accessed via the ``.ugrid`` accessor on the DataArrays and Datasets;
UgridDatasets and UgridDataArrays behave the same as ordinary Xarray DataArrays
and Datasets otherwise.

Imports
-------

The following imports suffice for the examples.

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default

    import matplotlib.pyplot as plt

    import xugrid








.. GENERATED FROM PYTHON SOURCE LINES 32-41

We'll use a simple synthetic example. This dataset contains data for all
topological attributes of a two dimensional mesh:

* Nodes: the coordinate pair (x, y) forming a point.
* Edges: a line or curve bounded by two nodes.
* Faces: the polygon enclosed by a set of edges.

In this disk example, very similar has been placed on the nodes, edges, and
faces.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default


    ds = xugrid.data.disk()
    ds






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2 {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:  (mesh2d_nNodes: 217, mesh2d_nFaces: 384, mesh2d_nEdges: 600)
    Dimensions without coordinates: mesh2d_nNodes, mesh2d_nFaces, mesh2d_nEdges
    Data variables:
        node_z   (mesh2d_nNodes) float64 1.941 9.182 0.1692 ... 4.553 4.581 5.932
        face_z   (mesh2d_nFaces) float64 1.868 2.092 2.505 ... 6.82 7.283 8.483
        edge_z   (mesh2d_nEdges) float64 1.993 1.817 1.805 ... 4.537 5.151 5.156</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-e7cb1fa4-51fb-4a23-877e-5927ffda0ee9' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-e7cb1fa4-51fb-4a23-877e-5927ffda0ee9' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span>mesh2d_nNodes</span>: 217</li><li><span>mesh2d_nFaces</span>: 384</li><li><span>mesh2d_nEdges</span>: 600</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-cf42ad4e-d34d-44a8-b5fa-c2a2aff965f0' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-cf42ad4e-d34d-44a8-b5fa-c2a2aff965f0' class='xr-section-summary'  title='Expand/collapse section'>Coordinates: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'></ul></div></li><li class='xr-section-item'><input id='section-b8830363-c5d3-4718-9442-bc1ac256a8a2' class='xr-section-summary-in' type='checkbox'  checked><label for='section-b8830363-c5d3-4718-9442-bc1ac256a8a2' class='xr-section-summary' >Data variables: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>node_z</span></div><div class='xr-var-dims'>(mesh2d_nNodes)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.941 9.182 0.1692 ... 4.581 5.932</div><input id='attrs-89115be1-d009-48a7-b97a-e86f0885d3e9' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-89115be1-d009-48a7-b97a-e86f0885d3e9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e2788b3a-e50c-41cb-94c8-23f7044d61e0' class='xr-var-data-in' type='checkbox'><label for='data-e2788b3a-e50c-41cb-94c8-23f7044d61e0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 1.94086697,  9.18220451,  0.16920664,  0.72165724,  1.06362593,
            7.92479531,  2.69911847,  2.09975131,  2.30958522,  2.68748894,
            3.32342126,  4.27209756,  5.55986752,  7.19586448, 10.        ,
            9.87549309,  8.53564812,  6.26977904,  3.82612141,  1.89228091,
            0.71595946,  1.72614323,  1.4309924 ,  1.18295418,  1.22390807,
            1.65839342,  2.13325875,  1.98173022,  0.62543361,  0.62988301,
            0.63619776,  0.73700445,  0.91954386,  0.95471541,  0.97344379,
            1.72607872,  1.51917675,  1.33130578,  1.17444706,  1.05684524,
            0.9697864 ,  0.87041546,  2.15381138,  2.35591981,  2.53801581,
            2.68983243,  2.79912752,  2.85074959,  2.82556179,  0.        ,
            0.07496965,  0.26250862,  0.42574029,  0.51641614,  0.58590695,
            0.68300626,  1.88213027,  2.03174202,  2.59138716,  3.31050085,
            3.59109948,  2.98878944,  1.63066402,  1.28802813,  1.77372014,
            2.66004625,  3.99506329,  5.58962097,  7.01795782,  7.85347654,
            7.2309138 ,  5.66901275,  3.50719976,  1.51309613,  0.51219204,
            0.72714034,  1.67691401,  1.88122472,  1.61806353,  1.38417811,
            1.53928958,  2.33531445,  3.80080727,  5.76062788,  7.74984029,
            5.9640108 ,  4.4580076 ,  3.75743851,  3.7602305 ,  3.83467993,
            3.48020325,  2.25094373,  2.8843563 ,  3.78352638,  4.9567201 ,
            6.39447769,  8.08064164,  2.89685853,  4.03087534,  5.31703854,
    ...
            2.38819975,  1.87365361,  0.81009139,  1.46459687,  1.88140003,
            1.63585727,  0.74902165,  1.38884394,  1.48760982,  0.82082855,
            1.25446602,  0.94195555,  0.99064404,  1.50179217,  1.3207664 ,
            1.14635647,  0.98216424,  0.83840963,  0.72283321,  1.23360026,
            1.09635461,  0.97453278,  0.85678024,  0.74088639,  1.05032898,
            0.93369596,  0.8236032 ,  0.72391678,  1.20644923,  1.10024898,
            0.93241837,  1.61813034,  1.32559537,  1.66044477,  1.44356698,
            1.24913506,  1.50958631,  2.15961635,  2.68133559,  2.40736627,
            1.32932846,  1.75121342,  2.65730912,  3.34409618,  3.0736685 ,
            1.73284769,  2.92300036,  4.01668176,  4.01462236,  2.7787918 ,
            4.4289945 ,  5.07467224,  4.34180671,  5.89413484,  6.14013185,
            1.99234852,  1.58741361,  1.38651874,  1.76815078,  2.92278934,
            4.81464394,  2.10187991,  1.57033068,  1.33902603,  1.86218442,
            3.32699633,  2.16807257,  1.5049102 ,  1.19302968,  1.78099911,
            2.17753807,  1.36138001,  0.9266051 ,  2.1141831 ,  1.11277075,
            1.95662328,  2.3984021 ,  2.66772771,  2.91525473,  3.13444692,
            3.31310731,  3.43517476,  2.6010072 ,  2.87028431,  3.14112535,
            3.40399255,  3.64174298,  2.95269199,  3.14489557,  3.33771326,
            3.54686075,  3.57657232,  3.67216577,  3.71380939,  4.5527151 ,
            4.5814859 ,  5.93242701])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>face_z</span></div><div class='xr-var-dims'>(mesh2d_nFaces)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.868 2.092 2.505 ... 7.283 8.483</div><input id='attrs-355366e2-9c32-435b-833b-d6c2622a94b9' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-355366e2-9c32-435b-833b-d6c2622a94b9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a4d33d46-92f6-4efc-9ece-2ab52f906287' class='xr-var-data-in' type='checkbox'><label for='data-a4d33d46-92f6-4efc-9ece-2ab52f906287' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1.86789562e+00, 2.09173768e+00, 2.50478703e+00, 3.19197130e+00,
           4.20601558e+00, 5.56777499e+00, 7.27914730e+00, 9.33461491e+00,
           1.93260611e+00, 2.34531779e+00, 3.03198226e+00, 4.02815473e+00,
           5.34836702e+00, 6.98778334e+00, 8.93424812e+00, 1.91352082e+00,
           2.58493745e+00, 3.56711594e+00, 4.81954588e+00, 6.32311053e+00,
           8.05647447e+00, 1.00000000e+01, 2.26211878e+00, 3.23979415e+00,
           4.48019765e+00, 5.92969999e+00, 7.56429805e+00, 9.36448541e+00,
           2.39718090e+00, 3.60384244e+00, 4.98190110e+00, 6.44758881e+00,
           7.98339546e+00, 9.57956569e+00, 3.07327329e+00, 4.42192061e+00,
           5.82275045e+00, 7.24117053e+00, 8.67363540e+00, 3.23639287e+00,
           4.53751457e+00, 5.74990047e+00, 6.87598748e+00, 7.93565664e+00,
           3.91876704e+00, 5.05307885e+00, 6.03736569e+00, 6.91365626e+00,
           3.85286033e+00, 4.63254463e+00, 5.17113698e+00, 5.56004815e+00,
           4.09869640e+00, 4.50971607e+00, 4.71432481e+00, 3.61156456e+00,
           3.54251675e+00, 3.26017157e+00, 3.21172150e+00, 2.79673960e+00,
           2.36369251e+00, 1.58439383e+00, 1.49913580e+00, 6.13718735e-01,
           1.73213925e+00, 1.71935793e+00, 2.12663364e+00, 2.87927571e+00,
           3.39452979e+00, 3.05823389e+00, 1.80955424e+00, 2.52421338e-01,
           1.61832964e+00, 1.78758426e+00, 2.42558394e+00, 3.07769330e+00,
           3.04815255e+00, 2.06658253e+00, 5.89806452e-01, 1.48547049e+00,
    ...
           2.54876620e+00, 1.76473918e+00, 8.67856208e-01, 6.53346582e-01,
           2.33890505e+00, 1.37163556e+00, 5.51092370e-01, 2.58595261e+00,
           1.59287546e+00, 4.80623878e-01, 2.27938585e+00, 1.08329222e+00,
           2.54053517e+00, 1.29317146e+00, 2.11416934e+00, 2.38683522e+00,
           1.97707283e+00, 2.24671678e+00, 2.49089952e+00, 2.70662635e+00,
           2.88440474e+00, 3.01030800e+00, 3.06630677e+00, 3.02932786e+00,
           2.14311251e+00, 2.43328879e+00, 2.69439347e+00, 2.92399629e+00,
           3.11188466e+00, 3.24276217e+00, 3.29669104e+00, 2.17641200e+00,
           2.49508895e+00, 2.79747590e+00, 3.08102607e+00, 3.33378530e+00,
           3.53988297e+00, 3.67966149e+00, 2.35740678e+00, 2.66679279e+00,
           2.97006316e+00, 3.25936776e+00, 3.51916892e+00, 3.73085750e+00,
           2.44744733e+00, 2.73947464e+00, 3.01502542e+00, 3.29755221e+00,
           3.57622955e+00, 3.83056722e+00, 2.67938758e+00, 2.93665105e+00,
           3.18557511e+00, 3.44628521e+00, 3.70738615e+00, 2.93676346e+00,
           3.17732762e+00, 3.34642235e+00, 3.51616785e+00, 3.70363706e+00,
           3.25786841e+00, 3.43749708e+00, 3.55328647e+00, 3.66999611e+00,
           3.74042764e+00, 3.94745881e+00, 3.98911303e+00, 3.96817430e+00,
           4.18481869e+00, 4.31056826e+00, 4.27392102e+00, 4.91538614e+00,
           5.14135806e+00, 5.09134419e+00, 5.51578007e+00, 5.65121695e+00,
           6.49131148e+00, 6.82005978e+00, 7.28318195e+00, 8.48284669e+00])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>edge_z</span></div><div class='xr-var-dims'>(mesh2d_nEdges)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.993 1.817 1.805 ... 5.151 5.156</div><input id='attrs-aa8fd24a-3a6a-4ef6-b428-f5ca73156e98' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-aa8fd24a-3a6a-4ef6-b428-f5ca73156e98' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-886d5a3d-fd8d-4001-99b2-f7ab68d92889' class='xr-var-data-in' type='checkbox'><label for='data-886d5a3d-fd8d-4001-99b2-f7ab68d92889' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 1.99287981,  1.81679035,  1.80498916,  2.01938838,  1.87985002,
            1.91102126,  8.09893408,  9.6103884 ,  8.44413971,  0.38243751,
            0.03660573,  0.8366236 ,  0.65779993,  0.77487776,  0.69668977,
            1.55578201,  0.9927347 ,  1.14412587,  7.91124421,  7.59760235,
            6.79462937,  2.74593749,  2.17217197,  3.1066894 ,  2.16144596,
            2.10777347,  1.95924548,  2.08161786,  2.21774993,  2.44110536,
            2.23280565,  2.45924868,  2.30358474,  2.42344689,  2.93760708,
            2.73044247,  3.08441026,  2.57352618,  2.7887575 ,  3.72283677,
            3.5007689 ,  4.00200697,  3.05979673,  3.41904718,  4.83590774,
            4.57304793,  5.22754024,  3.84921259,  4.3812002 ,  6.29311121,
            5.95312815,  6.7592189 ,  4.99301521,  5.71355116,  8.58868233,
            7.43705922,  7.63508071,  6.51929752, 10.        ,  8.96281509,
            9.27581496,  9.09566761,  9.00173647,  7.43080711,  8.58875333,
            7.91817279,  5.0133616 ,  7.01553291,  5.9776186 ,  2.78574578,
            4.89576329,  3.87948195,  1.22789299,  2.95183434,  2.22103491,
            1.18314216,  1.59760194,  1.55722614,  1.72047643,  1.77744378,
            1.58557505,  1.57964159,  1.26026871,  1.45828124,  1.30364001,
            1.41429536,  1.26108992,  1.12697341,  1.17476023,  1.08739991,
            1.18290303,  1.19724316,  1.37424039,  1.08438094,  1.18772265,
            1.32512384,  1.56307862,  1.90412491,  1.38169802,  1.6308967 ,
    ...
            4.51244313,  3.58953897,  3.47706329,  4.90195681,  4.37884828,
            5.14678857,  5.4781051 ,  5.22621356,  5.19325143,  6.02713506,
            1.76757648,  2.02292858,  1.40847568,  1.80096591,  1.55992972,
            1.4593352 ,  1.39642485,  1.34550844,  2.21547337,  1.46170927,
            1.79327163,  3.75172518,  2.31786663,  3.09166769,  4.03228576,
            1.8092777 ,  2.11164652,  1.35756411,  1.81748076,  1.52009739,
            1.45917104,  1.31393158,  1.25313539,  2.44224234,  1.40093834,
            1.8075719 ,  2.45055152,  1.80776389,  2.1512435 ,  1.23983226,
            1.78345078,  1.41824021,  1.32372854,  1.15170778,  1.05119084,
            1.19807631,  1.74022195,  2.12682328,  1.02740935,  1.67445974,
            1.22600284,  0.88143491,  1.58490293,  2.01981325,  1.46572826,
            2.50287993,  2.45872516,  2.76268369,  2.59008995,  2.73830557,
            2.99723212,  2.86871331,  3.00806632,  3.19757376,  3.1324055 ,
            3.25757234,  3.34985371,  3.36828385,  3.47225509,  3.56059958,
            2.70125405,  2.71725371,  2.97250875,  2.825351  ,  2.95273965,
            3.24131252,  3.06707354,  3.19600262,  3.49365362,  3.31700108,
            3.44594239,  3.56525559,  3.01342253,  3.1914638 ,  3.20465367,
            3.25229056,  3.33336483,  3.40680234,  3.38566826,  3.45622067,
            3.51939294,  3.59081984,  3.98136501,  3.65649451,  4.00057675,
            4.03593834,  4.00613605,  4.53662907,  5.15098259,  5.15622858])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-5775dcbe-bb91-4e0c-9137-6e0388ae311b' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-5775dcbe-bb91-4e0c-9137-6e0388ae311b' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-51

UgridDataArray
--------------

Just like Xarray, we can create a plot by selecting a DataArray from the
Dataset and calling the :py:meth:`UgridDataArray.ugrid.plot()` method.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default


    uda = ds["face_z"]
    uda.ugrid.plot()




.. image-sg:: /examples/images/sphx_glr_plotting_001.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.PolyCollection object at 0x7f5356451730>



.. GENERATED FROM PYTHON SOURCE LINES 56-63

Like Xarray, the axes and the colorbar are labeled automatically using the
available information.

The convenience function :py:meth:`xugrid.UgridDataArray.ugrid.plot()`
dispatches on the topological dimension of the variable. In this case, the
data is associated with the face dimension of the topology. Data located on
the edges results in a different kind of plot:

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default


    ds["edge_z"].ugrid.plot()




.. image-sg:: /examples/images/sphx_glr_plotting_002.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.LineCollection object at 0x7f53565b2550>



.. GENERATED FROM PYTHON SOURCE LINES 67-78

The method called by default depends on the type of the data:

=============== ===========================
Dimension       Plotting function
=============== ===========================
Face            :py:func:`xugrid.plot.pcolormesh`
Edge            :py:func:`xugrid.plot.line`
Node            :py:func:`xugrid.plot.tripcolor`
=============== ===========================

We can put them side by side to illustrate the differences:

.. GENERATED FROM PYTHON SOURCE LINES 78-84

.. code-block:: default


    fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, figsize=(11, 3), sharex=True, sharey=True)
    ds["face_z"].ugrid.plot(ax=ax0)
    ds["edge_z"].ugrid.plot(ax=ax1)
    ds["node_z"].ugrid.plot(ax=ax2)




.. image-sg:: /examples/images/sphx_glr_plotting_003.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.PolyCollection object at 0x7f5356909460>



.. GENERATED FROM PYTHON SOURCE LINES 85-87

We can also exactly control the type of plot we want. For example, to plot
filled contours for data associated with the face dimension:

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default


    ds["face_z"].ugrid.plot.contourf()




.. image-sg:: /examples/images/sphx_glr_plotting_004.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.tri.tricontour.TriContourSet object at 0x7f535681ad30>



.. GENERATED FROM PYTHON SOURCE LINES 91-92

We can also overlay this data with the edges:

.. GENERATED FROM PYTHON SOURCE LINES 92-97

.. code-block:: default


    fig, ax = plt.subplots()
    ds["face_z"].ugrid.plot.contourf()
    ds["face_z"].ugrid.plot.line(color="black")




.. image-sg:: /examples/images/sphx_glr_plotting_005.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.LineCollection object at 0x7f5356726ac0>



.. GENERATED FROM PYTHON SOURCE LINES 98-131

In general, there has to be data associated with the mesh topology before a
plot can be made. ``plot.line()`` forms an exception to this rule, as the
location of the edges is meaningful on its own: for this reason
``plot.line()`` does not error in the example above.

Other types of plot
-------------------

The available plotting methods per topology dimension are listed here.

For the **face** dimension:

* :py:func:`xugrid.plot.contour`
* :py:func:`xugrid.plot.contourf`
* :py:func:`xugrid.plot.imshow`
* :py:func:`xugrid.plot.pcolormesh`
* :py:func:`xugrid.plot.scatter`
* :py:func:`xugrid.plot.surface`

For the **edge** dimension:

* :py:func:`xugrid.plot.line`
* :py:func:`xugrid.plot.scatter`

For the **node** dimension:

* :py:func:`xugrid.plot.contour`
* :py:func:`xugrid.plot.contourf`
* :py:func:`xugrid.plot.scatter`
* :py:func:`xugrid.plot.surface`
* :py:func:`xugrid.plot.tripcolor`

All these (2D) plots are illustrated here for completeness' sake:

.. GENERATED FROM PYTHON SOURCE LINES 131-148

.. code-block:: default


    fig, axes = plt.subplots(nrows=5, ncols=3, figsize=(10, 15))

    ds["face_z"].ugrid.plot.pcolormesh(ax=axes[0, 0])
    ds["face_z"].ugrid.plot.contour(ax=axes[1, 0])
    ds["face_z"].ugrid.plot.contourf(ax=axes[2, 0])
    ds["face_z"].ugrid.plot.imshow(ax=axes[3, 0])
    ds["face_z"].ugrid.plot.scatter(ax=axes[4, 0])

    ds["edge_z"].ugrid.plot.line(ax=axes[0, 1])
    ds["edge_z"].ugrid.plot.scatter(ax=axes[4, 1])

    ds["node_z"].ugrid.plot.tripcolor(ax=axes[0, 2])
    ds["node_z"].ugrid.plot.contour(ax=axes[1, 2])
    ds["node_z"].ugrid.plot.contourf(ax=axes[2, 2])
    ds["node_z"].ugrid.plot.scatter(ax=axes[4, 2])




.. image-sg:: /examples/images/sphx_glr_plotting_006.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.PathCollection object at 0x7f5355557d30>



.. GENERATED FROM PYTHON SOURCE LINES 149-150

The ``surface`` methods generate 3D surface plots:

.. GENERATED FROM PYTHON SOURCE LINES 150-157

.. code-block:: default


    fig = plt.figure(figsize=plt.figaspect(0.5))
    ax0 = fig.add_subplot(1, 2, 1, projection="3d")
    ax1 = fig.add_subplot(1, 2, 2, projection="3d")
    ds["face_z"].ugrid.plot.surface(ax=ax0)
    ds["node_z"].ugrid.plot.surface(ax=ax1)




.. image-sg:: /examples/images/sphx_glr_plotting_007.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mpl_toolkits.mplot3d.art3d.Poly3DCollection object at 0x7f5354cd14f0>



.. GENERATED FROM PYTHON SOURCE LINES 158-164

Additional Arguments
--------------------

Once again like in Xarray, additional arguments are passed to the underlying
matplotlib function and the additional arguments supported by Xarray can be
used:

.. GENERATED FROM PYTHON SOURCE LINES 164-167

.. code-block:: default


    ds["face_z"].ugrid.plot(cmap="RdBu", levels=8, yincrease=False)




.. image-sg:: /examples/images/sphx_glr_plotting_008.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.PolyCollection object at 0x7f5354b0d910>



.. GENERATED FROM PYTHON SOURCE LINES 168-173

As a function
-------------

The plotting methods can also be called as a function, in which case they
take an xarray DataArray and a xugrid grid as arguments.

.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: default


    grid = ds.ugrid.grids[0]
    da = ds.obj["face_z"]

    xugrid.plot.pcolormesh(grid, da)




.. image-sg:: /examples/images/sphx_glr_plotting_009.png
   :alt: plotting
   :srcset: /examples/images/sphx_glr_plotting_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.PolyCollection object at 0x7f5354a5c4c0>



.. GENERATED FROM PYTHON SOURCE LINES 180-186

Xarray DataArray plots
----------------------

As mentioned, apart from the ``.ugrid`` accessor, a UgridDataArray behaves the
same as an Xarray DataArray. To illustrate, we can select a location
somewhere in the unstructured topology, and plot the resulting timeseries:

.. GENERATED FROM PYTHON SOURCE LINES 186-191

.. code-block:: default


    ds = xugrid.data.adh_san_diego()
    depth = ds["depth"]
    depth.isel(node=1000).plot()




.. image-sg:: /examples/images/sphx_glr_plotting_010.png
   :alt: node = 1000, node_x = 4.84e+05, node_y = 3.614e+06
   :srcset: /examples/images/sphx_glr_plotting_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/xugrid/xugrid/.tox/build/lib/python3.9/site-packages/xugrid/ugrid/conventions.py:193: UserWarning: No standard_name of ('projection_x_coordinate', 'longitude', 'projection_y_coordinate', 'latitude') in ['node_x', 'node_y'].
    Using node_x and node_y as projected x and y coordinates.
      warnings.warn(

    [<matplotlib.lines.Line2D object at 0x7f535492cf40>]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.666 seconds)


.. _sphx_glr_download_examples_plotting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plotting.py <plotting.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plotting.ipynb <plotting.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
